{"version":3,"sources":["redux/user/user.types.ts","redux/user/user.actions.ts","redux/user/user.selector.ts","redux/pokemon/pokemon.types.ts","redux/pokemon/pokemon.action.ts","components/icon-btn/icon-btn.component.tsx","components/header/header.component.tsx","redux/toast/toast.types.ts","redux/toast/toast.actions.ts","constants/poke.constants.ts","redux/toast/toast.selector.ts","components/toast/toast.component.tsx","components/poke-card/poke-card.component.tsx","components/directory/directory.component.tsx","redux/pagination/pagination.selector.ts","redux/pagination/pagination.types.ts","redux/pagination/pagination.action.ts","components/pagination/pagination.component.tsx","redux/pokemon/pokemon.selector.ts","pages/homepage/homepage.component.tsx","pages/favorites/favorites.component.tsx","components/log-in/log-in.component.tsx","components/sign-up/sign-up.component.tsx","pages/sign-in-up/sign-in-up.component.tsx","App.tsx","reportWebVitals.ts","redux/user/user.reducer.ts","redux/toast/toast.reducer.ts","redux/pagination/pagination.reducer.ts","redux/pokemon/pokemon.reducer.ts","redux/root.reducer.ts","util/axios.util.ts","redux/pokemon/pokemon.sagas.ts","redux/root.saga.ts","redux/store.ts","index.tsx"],"names":["userActions","setCurrentUser","user","type","payload","selectCurrentUser","createSelector","state","currentUser","pokemonActions","fetchAllPokemonStart","fetchAllPokemonFailure","err","fetchFavPokemonStart","fetchFavPokemonSuccess","favPokemon","mapStateToProps","createStructuredSelector","connect","dispatch","getFavPokemon","button","iconName","btnName","url","disabled","navigate","useNavigate","className","id","onClick","length","currUser","setSearch","search","setPokemonSearch","getAllPokemon","Navbar","bg","variant","expand","sticky","Container","Brand","href","Toggle","Collapse","Nav","onSelect","selectedKey","replace","quantity","toastActionTypes","setToastComp","pokeConstants","FAV_POKE_URL","USERS_URL","SIGN_UP","LOG_IN","POKEMON_BASE_URL","POKEMON_IMG_URL","GET_FAV_LIST","selectToast","toast","selectToastShow","show","selectToastHeader","header","selectToastMsg","msg","selectToastVariant","headerMsg","showToast","Row","Col","xs","ToastContainer","position","Toast","onClose","delay","autohide","Header","Body","pokemon","showFavAddBtn","name","slice","indexOf","lastIndexOf","srcUrl","Card","Img","src","Title","toUpperCase","Footer","Button","axios","post","process","REACT_APP_BACKEND_URL","pokemonId","defaultImg","headers","then","resp","status","catch","console","error","Directory","map","index","selectPage","page","selectActivePage","activePage","selectTotalPage","count","paginationActions","setTotalPageCount","total","active","setActivePage","setActivePageNumber","pages","handlePageClick","e","Number","parseInt","target","text","totalCount","pageCount","num","push","Pagination","Item","size","selectPokemon","selectAllPokemon","allPokemon","selectFavPokemon","selectPokemonSearch","HomePage","this","props","React","Component","mapStatetoProps","FavPage","LoginSchema","yup","shape","email","required","matches","trim","password","initialValues","validationSchema","onSubmit","values","a","data","exists","bcryptjs","compareSync","errors","touched","handleChange","handleBlur","handleSubmit","Form","Group","controlId","Label","Control","placeholder","onChange","onBlur","SignupSchema","min","confirm","oneOf","salt","bcrypt","genSaltSync","hashdPwd","hashSync","body","as","useState","key","setKey","Tabs","activeKey","k","defaultActiveKey","Tab","eventKey","title","element","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","userReducer","action","toastReducer","paginatonReducer","isAllPokemonFetching","allPokemonError","isFavPokemonFetching","favPokemonError","pokemonReducer","persistConfig","storage","whitelist","rootReducer","combineReducers","persistReducer","axiosGetCall","route","query","offset","onSuccess","response","onError","config","message","Promise","reject","get","axiosPostCall","fetchAllPokemon","fetchFavPokemonStartSaga","fetchFavPokemon","fetchAllPokemonStartSaga","pokemonSaga","select","getAllPokemonResp","results","put","takeLatest","curerntUser","all","call","rootSaga","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","applyMiddleware","run","persistedStore","persistStore","ReactDOM","render","StrictMode","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.4501f34a.chunk.js","sourcesContent":["export const userActions = {\r\n    SET_CURRENT_USER: 'SET_CURRENT_USER',\r\n}\r\n\r\nexport interface UserState {\r\n    currentUser: string,\r\n}","import { userActions, UserState } from \"./user.types\";\r\n\r\nexport const setCurrentUser = (user: UserState) => ({\r\n    type: userActions.SET_CURRENT_USER,\r\n    payload: user,\r\n})","import { createSelector } from 'reselect';\r\nimport { UserState } from './user.types';\r\n\r\nconst selectUser = (state: any)  => state.user;\r\n\r\nexport const selectCurrentUser = createSelector(\r\n    [selectUser],\r\n    (user : UserState) => user.currentUser,\r\n);\r\n\r\n","export const pokemonActions = {\r\n    FETCH_ALL_POKEMON_START : 'FETCH_ALL_POKEMON_START',\r\n    FETCH_ALL_POKEMON_SUCCESS : 'FETCH_ALL_POKEMON_SUCCESS',\r\n    FETCH_ALL_POKEMON_FAILURE : 'FETCH_ALL_POKEMON_FAILURE',\r\n    ADD_FAV_POKEMON_START : 'ADD_FAV_POKEMON_START',\r\n    ADD_FAV_POKEMON_SUCCESS : 'ADD_FAV_POKEMON_SUCCESS',\r\n    ADD_FAV_POKEMON_FAILURE : 'ADD_FAV_POKEMON_FAILURE',\r\n    FETCH_FAV_POKEMON_START : 'FETCH_FAV_POKEMON_START',\r\n    FETCH_FAV_POKEMON_SUCCESS : 'FETCH_FAV_POKEMON_SUCCESS',\r\n    FETCH_FAV_POKEMON_FAILURE : 'FETCH_FAV_POKEMON_FAILURE',\r\n    SET_SEARCH : 'SET_SEARCH',\r\n}\r\n\r\nexport interface AllPokemon {\r\n    count: number,\r\n    results: Pokemon[]\r\n};\r\n\r\nexport interface Pokemon {\r\n    name: string,\r\n    url: string,\r\n}\r\n\r\nexport interface PokemonDirectoryState {\r\n    pokemon: Pokemon[]\r\n}\r\n\r\nexport interface PokemonState {\r\n    isAllPokemonFetching: boolean,\r\n    allPokemonError: Error | null,\r\n    isFavPokemonFetching: boolean,\r\n    favPokemonError: Error | null,\r\n    allPokemon: Pokemon[],\r\n    favPokemon: Pokemon[],\r\n    search: string,\r\n}","import { AllPokemon, Pokemon, pokemonActions } from \"./pokemon.types\";\r\n\r\nexport const fetchAllPokemonStart = () => ({\r\n    type: pokemonActions.FETCH_ALL_POKEMON_START,\r\n});\r\n\r\nexport const fetchAllPokemonSuccess = (allPokemon: AllPokemon) => ({\r\n    type: pokemonActions.FETCH_ALL_POKEMON_SUCCESS,\r\n    payload: allPokemon\r\n});\r\n\r\nexport const fetchAllPokemonFailure = (err: Error) => ({\r\n    type: pokemonActions.FETCH_ALL_POKEMON_FAILURE,\r\n    payload: err\r\n});\r\n\r\nexport const fetchFavPokemonStart = () => ({\r\n    type: pokemonActions.FETCH_FAV_POKEMON_START,\r\n});\r\n\r\nexport const fetchFavPokemonSuccess = (favPokemon: Pokemon[]) => ({\r\n    type: pokemonActions.FETCH_FAV_POKEMON_SUCCESS,\r\n    payload: favPokemon\r\n});\r\n\r\nexport const fetchFavPokemonFailure = (err: Error) => ({\r\n    type: pokemonActions.FETCH_FAV_POKEMON_FAILURE,\r\n    payload: err\r\n});\r\n\r\nexport const setPokemonSearch = (search: string) => ({\r\n    type: pokemonActions.SET_SEARCH,\r\n    payload: search\r\n});","import { useNavigate } from 'react-router';\r\n\r\nimport './icon-btn.styles.scss';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IconBtn } from './icon-btn.types';\r\nimport { Dispatch } from 'redux';\r\nimport { setCurrentUser } from '../../redux/user/user.actions';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\nimport { fetchFavPokemonStart } from '../../redux/pokemon/pokemon.action';\r\n\r\nconst IconButton = ({ button : {iconName , btnName, url ,disabled} ,setCurrentUser, getFavPokemon}: IconBtn) => {\r\n    const navigate = useNavigate();\r\n    const navigateToURL = () => {\r\n        if (url && url.length > 0) {\r\n            if (url === \"/favorite-pokemons\") {\r\n                getFavPokemon?.();\r\n            }\r\n            navigate(url);\r\n        }\r\n        if (!url && url.length===0 && btnName === 'Log Out')\r\n        {\r\n            setCurrentUser('');\r\n            navigate('/sign-in-up');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`icon icon-btn ${disabled ? 'disable-btn': ''} `} id=\"icon-btn-id\" onClick={navigateToURL}>\r\n            <i className={`bi bi-${iconName} custom-icon`}></i>\r\n\r\n            {\r\n                btnName && btnName.length > 0 ?  <p className=\"icon-btn-name\">{btnName}</p> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: selectCurrentUser,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch : Dispatch) => ({\r\n    setCurrentUser: (payload: any) => dispatch(setCurrentUser(payload)),\r\n    getFavPokemon: () => dispatch(fetchFavPokemonStart()),\r\n});\r\nexport default connect(mapStateToProps,mapDispatchToProps)(IconButton);","import { Navbar, Container, Nav } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router';\r\nimport { connect } from 'react-redux';\r\n\r\nimport IconButton from '../icon-btn/icon-btn.component';\r\nimport { IconBtnProps } from '../icon-btn/icon-btn.types';\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { Dispatch } from 'redux';\r\nimport { HeaderProps } from './header.types';\r\n\r\nimport './header.styles.scss';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\nimport { setPokemonSearch, fetchAllPokemonStart } from '../../redux/pokemon/pokemon.action';\r\n\r\nconst Header = ({ currUser, setSearch, getAllPokemon } : HeaderProps ) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const signIn: IconBtnProps = {\r\n        iconName: \"person-check-fill\",\r\n        btnName: \"Sign In\",\r\n        url: \"/sign-in-up\",\r\n        quantity: 0,\r\n        disabled: false,\r\n    }\r\n    const logOut : IconBtnProps = {\r\n        iconName : \"person-check-fill\",\r\n        btnName : \"Log Out\",\r\n        url : \"\",\r\n        quantity:0,\r\n        disabled : false\r\n    }\r\n\r\n    const fav : IconBtnProps = {\r\n        iconName : \"heart-fill\",\r\n        btnName : \"Favorites\",\r\n        url : \"/favorite-pokemons\",\r\n        quantity:0,\r\n        disabled : false\r\n    }\r\n\r\n\r\n    // const handleSearchFormSubmit = (e: any) => {\r\n    //     e.preventDefault();\r\n    // }\r\n\r\n    // const handleEmptySearch = (e: any) => {\r\n    //     const searchBar: any = document.getElementById(\"search-bar\");\r\n    //     const searchValue = searchBar ? searchBar.value : \"\";\r\n    //     if (searchValue.length === 0) {\r\n    //         setSearch?.(\"\");\r\n    //         getAllPokemon?.();\r\n    //     }\r\n    // }\r\n\r\n    // const handleSearch = () => {\r\n    //     const searchBar: any = document.getElementById(\"search-bar\")\r\n    //     const searchValue = searchBar ? searchBar.value : \"\";\r\n    //     if (searchValue.length > 0) {\r\n    //         setSearch?.(searchValue);\r\n    //         getAllPokemon?.();\r\n    //     }\r\n    // }\r\n\r\n    const handleBrandClick = () => {\r\n        navigate(\"/\");\r\n        getAllPokemon?.();\r\n    }\r\n\r\n    const handleNavSelect = (selectedKey: string | null) => navigate(selectedKey ? selectedKey : \"\", { replace: true });\r\n\r\n    return (\r\n        <Navbar className=\"header\" bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\r\n            <Container>\r\n                <Navbar.Brand href=\"\" onClick={handleBrandClick}>\r\n                    Pokedex\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav onSelect={handleNavSelect} id=\"poke-nav\" className=\"justify-content-center\">\r\n                        {/* <Form className=\"d-flex\" onSubmit={handleSearchFormSubmit}>\r\n                            <FormControl\r\n                                type=\"search\"\r\n                                placeholder=\"Search Pokemon names...\"\r\n                                className=\"search-bar\"\r\n                                aria-label=\"Search\"\r\n                                id=\"search-bar\"\r\n                                onChange={handleEmptySearch}\r\n                            />\r\n                            <Button variant=\"outline-light search-icon\" onClick={handleSearch}><i className=\"bi bi-search\"></i></Button>\r\n                        </Form> */}\r\n                        <div className=\"icon-btn-group\">\r\n                            {\r\n                                currUser ?\r\n                                <IconButton button={fav} />\r\n                                : null\r\n                            }\r\n                            {\r\n                                currUser ?\r\n                                    <IconButton button={logOut} />\r\n                                :   <IconButton button={signIn} />\r\n                            }\r\n                        </div>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    currUser : selectCurrentUser,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch : Dispatch) => ({\r\n    setSearch: (search : string) => dispatch(setPokemonSearch(search)),\r\n    getAllPokemon: () => dispatch(fetchAllPokemonStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","export const toastActionTypes = {\r\n    TOGGLE_SHOW_TOAST: 'TOGGLE_SHOW_TOAST',\r\n};\r\n\r\nexport interface ToastState {\r\n    show: boolean,\r\n    header?: string,\r\n    msg?: string,\r\n    variant?: string,\r\n}","import { toastActionTypes, ToastState } from \"./toast.types\"\r\n\r\nexport const setToastComp = (payload: ToastState) => ({\r\n    type: toastActionTypes.TOGGLE_SHOW_TOAST,\r\n    payload,\r\n});","const pokeConstants = {\r\n    FAV_POKE_URL : \"/fav-pokemon\",\r\n    USERS_URL : \"/users\",\r\n    SIGN_UP : \"/sign-up\",\r\n    LOG_IN : \"/log-in\",\r\n    POKEMON_BASE_URL : \"https://pokeapi.co/api/v2/pokemon\",\r\n    POKEMON_IMG_URL : \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/\",\r\n    GET_FAV_LIST: \"/get-fav-list\"\r\n}\r\n\r\nexport default pokeConstants;","import { createSelector } from \"reselect\";\r\nimport RootState from \"../store.type\";\r\nimport { ToastState } from \"./toast.types\";\r\n\r\nexport const selectToast = (state: RootState) => state.toast;\r\n\r\nexport const selectToastShow = createSelector(\r\n    [selectToast],\r\n    (toast: ToastState) => toast.show,\r\n);\r\n\r\nexport const selectToastHeader = createSelector(\r\n    [selectToast],\r\n    (toast: ToastState) => toast.header,\r\n);\r\n\r\nexport const selectToastMsg = createSelector(\r\n    [selectToast],\r\n    (toast: ToastState) => toast.msg,\r\n);\r\n\r\nexport const selectToastVariant = createSelector(\r\n    [selectToast],\r\n    (toast: ToastState) => toast.variant,\r\n);","import { Row, Col, Toast, ToastContainer } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { setToastComp } from '../../redux/toast/toast.actions';\r\nimport { selectToastHeader, selectToastMsg, selectToastShow, selectToastVariant } from '../../redux/toast/toast.selector';\r\nimport { ToastState } from '../../redux/toast/toast.types';\r\n\r\nimport { ToastProps } from './toast.types';\r\n\r\nconst ToastNotification = ({ show, showToast, msg, headerMsg, variant }: ToastProps) => {\r\n    return (\r\n        <Row>\r\n            <Col xs={6}>\r\n                <ToastContainer position=\"top-center\" className=\"p-3\">\r\n                    <Toast onClose={() => showToast ? showToast({ show : false }) : null}\r\n                        bg={variant} show={show} delay={3000} autohide>\r\n                        <Toast.Header>\r\n                            <strong className=\"me-auto\">{headerMsg}</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>{msg}</Toast.Body>\r\n                    </Toast>\r\n                </ToastContainer>\r\n            </Col>\r\n        </Row>\r\n    )\r\n};\r\n\r\nexport const mapStateToProps = createStructuredSelector({\r\n    show: selectToastShow,\r\n    headerMsg: selectToastHeader,\r\n    msg: selectToastMsg,\r\n    variant: selectToastVariant,\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    showToast: (payload: ToastState) => dispatch(setToastComp(payload)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToastNotification);","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nimport { PokeCardProps } from './poke-card.types';\r\nimport { ToastState } from '../../redux/toast/toast.types';\r\nimport { setToastComp } from '../../redux/toast/toast.actions';\r\nimport pokeConstants from '../../constants/poke.constants';\r\n\r\nimport ToastNotification from '../../components/toast/toast.component';\r\nimport './poke-card.styles.scss';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from '../../redux/user/user.selector';\r\n\r\nconst PokeCard = ({ pokemon, showToast, currentUser, showFavAddBtn }: PokeCardProps) => {\r\n\r\n    const { POKEMON_IMG_URL, FAV_POKE_URL } = pokeConstants;\r\n    const { name, url } = pokemon;\r\n    const id = url.slice(url.indexOf(\"pokemon\") + \"pokemon/\".length, url.lastIndexOf(\"/\"));\r\n    const srcUrl = `${POKEMON_IMG_URL}${id}.png`;\r\n\r\n    const handleAddFavPokemon = () => {\r\n        axios.post(process.env.REACT_APP_BACKEND_URL + FAV_POKE_URL,\r\n            {\r\n            pokemonId: id,\r\n            name,\r\n            url,\r\n            defaultImg: srcUrl,\r\n            user: currentUser\r\n        }, {\r\n            headers: {\"Access-Control-Allow-Origin\": \"*\"}\r\n        })\r\n        .then(resp => {\r\n            const toast = {\r\n                show: true,\r\n                header: \"Add Favorite\",\r\n                msg: `${name} added to your favorite pokemon list successfully`,\r\n                variant: \"success\",\r\n            };\r\n            if (resp.status !== 201) {\r\n                toast.msg = `Failed to add ${name} to your favorite pokemon list, please try again later.`\r\n                toast.variant = \"warning\"\r\n            }\r\n            showToast?.(toast)\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"poke-card\">\r\n            <Card>\r\n                <Card.Img variant=\"top\" src={srcUrl} />\r\n                <Card.Body>\r\n                    <Card.Title>{name ? name.slice(0, 1).toUpperCase() + name.slice(1) : ''}</Card.Title>\r\n                </Card.Body>\r\n                {\r\n                    showFavAddBtn?\r\n                    <Card.Footer>\r\n                    <Button variant=\"dark\" type=\"button\" onClick={handleAddFavPokemon}>\r\n                        Add as Favorite\r\n                    </Button>\r\n                    </Card.Footer> : null\r\n                }\r\n            </Card>\r\n            <ToastNotification />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    currentUser: selectCurrentUser,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch : Dispatch) => ({\r\n    showToast: (show: ToastState) => dispatch(setToastComp(show)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PokeCard);","// import { connect } from 'react-redux';\r\n// import { createStructuredSelector } from 'reselect';\r\n// import { selectAllPokemon } from '../../redux/pokemon/pokemon.selector';\r\nimport { Pokemon } from '../../redux/pokemon/pokemon.types';\r\nimport PokeCard from '../poke-card/poke-card.component';\r\n\r\nimport './directory.styles.scss';\r\nimport { DirectoryProps } from './directory.types';\r\n\r\nconst Directory = ({ pokemon, showFavAddBtn }: DirectoryProps) => {\r\n    return (\r\n        <div className=\"directory\">\r\n            {\r\n                pokemon.map((pokemon: Pokemon, index) => {\r\n                    return (\r\n                        <PokeCard key={index + 1} pokemon={pokemon} showFavAddBtn={showFavAddBtn}/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Directory;","import { createSelector } from \"reselect\";\r\nimport { RootState } from \"../store.type\";\r\nimport { PaginationState } from \"./pagination.types\";\r\n\r\nexport const selectPage = (state: RootState) => state.page;\r\n\r\nexport const selectActivePage = createSelector (\r\n    [selectPage],\r\n    (page: PaginationState) => page.activePage,\r\n);\r\n\r\nexport const selectTotalPage = createSelector (\r\n    [selectPage],\r\n    (page: PaginationState) => page.count,\r\n);","export const  paginationActions = {\r\n    SET_ACTIVE_PAGE_NO: 'SET_ACTIVE_PAGE_NO',\r\n    SET_TOTAL_PAGE_COUNT: 'SET_TOTAL_PAGE_COUNT',\r\n}\r\n\r\nexport interface PaginationState {\r\n    count : number,\r\n    activePage : number,\r\n}","import { paginationActions } from \"./pagination.types\";\r\n\r\nexport const setActivePageNumber = (page : number) => ({\r\n    type: paginationActions.SET_ACTIVE_PAGE_NO,\r\n    payload: page,\r\n});\r\n\r\nexport const setTotalPageCount = (count : number) => ({\r\n    type: paginationActions.SET_TOTAL_PAGE_COUNT,\r\n    payload: count,\r\n});","import { Pagination } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { selectActivePage, selectTotalPage } from \"../../redux/pagination/pagination.selector\";\r\nimport { IPagingProps } from \"./pagination.types\";\r\n\r\nimport './pagination.styles.scss';\r\nimport { Dispatch } from \"redux\";\r\nimport { setActivePageNumber } from \"../../redux/pagination/pagination.action\";\r\nimport { fetchAllPokemonStart } from \"../../redux/pokemon/pokemon.action\";\r\n\r\nconst CusPagination = ({active, total, setActivePage, search, getAllPokemon }: IPagingProps) => {\r\n\r\n    const pages = [];\r\n\r\n    const handlePageClick = (e: any) => {\r\n        const page = Number.parseInt(e.target.text, 10);\r\n        if (setActivePage) {\r\n            setActivePage(page);\r\n            getAllPokemon?.()\r\n        }\r\n    }\r\n\r\n    const totalCount = total ? total : 0;\r\n\r\n    let pageCount = (totalCount / 100);\r\n\r\n    if (totalCount  % 100!== 0) {\r\n        pageCount = pageCount + 1;\r\n    }\r\n\r\n\r\n    if(total) {\r\n        for (let num = 1; num <= pageCount; num++) {\r\n            pages.push(\r\n                <Pagination.Item key={total + 1 + num} active={num === active} onClick={handlePageClick} >\r\n                {num}\r\n                </Pagination.Item>,\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={`ice-paging`}>\r\n            <Pagination size=\"lg\">{pages}</Pagination>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    total : selectTotalPage,\r\n    active : selectActivePage,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    setActivePage: (page: number) => dispatch(setActivePageNumber(page)),\r\n    getAllPokemon: () => dispatch(fetchAllPokemonStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CusPagination);","import { createSelector } from \"reselect\";\r\nimport { RootState } from \"../store.type\";\r\nimport { PokemonState } from \"./pokemon.types\";\r\n\r\nexport const selectPokemon = (state: RootState) => state.pokemon;\r\n\r\nexport const selectAllPokemon = createSelector (\r\n    [selectPokemon],\r\n    (pokemon: PokemonState) => pokemon.allPokemon,\r\n)\r\n\r\nexport const selectFavPokemon = createSelector(\r\n    [selectPokemon],\r\n    (pokemon: PokemonState) => pokemon.favPokemon\r\n)\r\n\r\nexport const selectPokemonSearch = createSelector(\r\n    [selectPokemon],\r\n    (pokemon: PokemonState) => pokemon.search\r\n)","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchAllPokemonStart } from '../../redux/pokemon/pokemon.action';\r\nimport { HomepageProps } from './homepage.types';\r\n\r\n\r\nimport Directory from '../../components/directory/directory.component';\r\nimport CusPagination from '../../components/pagination/pagination.component';\r\n\r\nimport './homepage.styles.scss';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectAllPokemon } from '../../redux/pokemon/pokemon.selector';\r\n\r\nclass HomePage extends React.Component<HomepageProps> {\r\n\r\n    componentDidMount() {\r\n        const { getAllPokemon } = this.props;\r\n        getAllPokemon?.();\r\n    }\r\n\r\n    render() {\r\n        const { allPokemon } = this.props;\r\n        return (\r\n            <div>\r\n                <Directory pokemon={allPokemon} showFavAddBtn={true}/>\r\n                <CusPagination />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStatetoProps = createStructuredSelector({\r\n    allPokemon: selectAllPokemon,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    getAllPokemon: () => dispatch(fetchAllPokemonStart()),\r\n});\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(HomePage);","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchFavPokemonStart } from '../../redux/pokemon/pokemon.action';\r\nimport { FavPageProps } from './favorites.types';\r\n\r\nimport Directory from '../../components/directory/directory.component';\r\n\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectFavPokemon } from '../../redux/pokemon/pokemon.selector';\r\n\r\nimport './favorites.styles.scss';\r\n\r\n\r\nclass FavPage extends React.Component<FavPageProps> {\r\n\r\n    componentDidMount() {\r\n        const { getFavPokemon } = this.props;\r\n        getFavPokemon?.();\r\n    }\r\n\r\n    render() {\r\n        const { favPokemon } = this.props;\r\n        return (\r\n            <div>\r\n                <Directory pokemon={favPokemon} showFavAddBtn={false}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStatetoProps = createStructuredSelector({\r\n    favPokemon: selectFavPokemon,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    getFavPokemon: () => dispatch(fetchFavPokemonStart()),\r\n});\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(FavPage);","import React from 'react';\r\nimport { TypedFormik } from 'formik-typed';\r\nimport * as yup from 'yup';\r\n\r\nimport { Form, Button, Row, Col } from 'react-bootstrap';\r\n\r\nimport { setCurrentUser } from '../../redux/user/user.actions';\r\nimport { setToastComp } from '../../redux/toast/toast.actions';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\nimport bcryptjs from 'bcryptjs'\r\n\r\nimport { LogInResponse } from './log-in.types';\r\nimport { ToastState } from '../../redux/toast/toast.types';\r\n\r\nimport ToastNotification from '../../components/toast/toast.component';\r\nimport pokeConstants from '../../constants/poke.constants';\r\n\r\nimport './log-in.styles.scss';\r\n\r\nconst LogIn = ({ setCurrentUser, showToast }: any) => {\r\n    const navigate = useNavigate();\r\n\r\n    const LoginSchema = yup.object().shape({\r\n        email: yup.string()\r\n            .email('Please enter a valid email address.')\r\n            .required('Email is required.')\r\n            .matches(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g)\r\n            .trim(),\r\n        password: yup.string()\r\n            .required('Password is required.'),\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <TypedFormik\r\n                initialValues={{\r\n                    email: '',\r\n                    password: '',\r\n                }}\r\n                validationSchema={LoginSchema}\r\n                onSubmit={values => {\r\n                    const { USERS_URL, LOG_IN } = pokeConstants;\r\n                    axios.post<LogInResponse, any, any>(process.env.REACT_APP_BACKEND_URL + USERS_URL + LOG_IN, {\r\n                        email: values.email,\r\n                        password: values.password,\r\n                    }).then(async resp => {\r\n                        const toast = {\r\n                            show: true,\r\n                            header: \"Log In\",\r\n                            msg: \"Email or password is wrong, please check\",\r\n                            variant: \"warning\",\r\n                        };\r\n                        if (resp.status === 200) {\r\n                            const data = resp.data;\r\n                            if (data.exists) {\r\n                                const logIn = await bcryptjs.compareSync(values.password, data.user?.password);\r\n                                if (logIn) {\r\n                                    setCurrentUser(data.user?.email);\r\n                                    navigate(\"/\");\r\n                                } else {\r\n                                    showToast(toast);\r\n                                }\r\n                            } else {\r\n                                showToast(toast)\r\n                            }\r\n                        }\r\n                    })\r\n                        .catch((err: any) => console.error(err));\r\n                }}>\r\n                {({\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit\r\n                }) => (\r\n                    <Form className=\"log-in\" onSubmit={handleSubmit}>\r\n                        <h3>Log In</h3>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Email address</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        name=\"email\"\r\n                                        placeholder=\"Enter email\"\r\n                                        className={touched.email && errors.email ? \"error\" : \"\"}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                    {\r\n                                        touched.email && errors.email ?\r\n                                            (<div className=\"error-message\">{errors.email}</div>)\r\n                                            : null\r\n                                    }\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control type=\"password\" name=\"password\"\r\n                                        placeholder=\"Password\"\r\n                                        className={touched.password && errors.password ? \"error\" : \"\"}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur} />\r\n                                    {\r\n                                        touched.password && errors.password ?\r\n                                            (<div className=\"error-message\">{errors.password}</div>)\r\n                                            : null\r\n                                    }\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Button variant=\"dark\" type=\"submit\" className=\"log-in-button\">\r\n                                    Log In\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                )}\r\n            </TypedFormik>\r\n            <ToastNotification />\r\n        </div>\r\n\r\n    );\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    setCurrentUser: (payload: any) => dispatch(setCurrentUser(payload)),\r\n    showToast: (show: ToastState) => dispatch(setToastComp(show)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(LogIn);\r\n\r\n","import { TypedFormik } from 'formik-typed';\r\nimport * as yup from 'yup';\r\nimport axios from 'axios';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nimport { Form, Button, Col } from 'react-bootstrap';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\nimport { setToastComp } from '../../redux/toast/toast.actions';\r\nimport { ToastState } from '../../redux/toast/toast.types';\r\nimport { SignUpProps, SignUpResponse } from './sign-up.types';\r\n\r\nimport pokeConstants from '../../constants/poke.constants';\r\nimport ToastNotification from '../../components/toast/toast.component';\r\n\r\nimport './sign-up.styles.scss';\r\n\r\nconst SignupSchema = yup.object().shape({\r\n    email: yup.string()\r\n        .email('Please enter a valid email address.')\r\n        .required('Email is required.')\r\n        .matches(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g, \"Please enter a valid email address.\"),\r\n    password: yup.string()\r\n        .required()\r\n        .min(8, \"Password should be of 8 characters at least.\")\r\n        .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])/, \"Password should have at least 1 capital letter, small letter, 1 number and 1 special character among !@#$%^&*\"),\r\n    confirm: yup.string()\r\n        .required(\"Re-enter password.\")\r\n        .oneOf([yup.ref(\"password\")], 'Passwords do not match.'),\r\n});\r\n\r\nconst initialValues = {\r\n    email: '',\r\n    password: '',\r\n    confirm: '',\r\n}\r\nconst SignUp = ({showToast} :SignUpProps) => {\r\n    // const navigate = useNavigate();\r\n    return (\r\n        <div className=\"sign-up\">\r\n        <TypedFormik\r\n            initialValues={initialValues}\r\n            validationSchema={SignupSchema}\r\n                onSubmit={(values) => {\r\n                    const saltRounds = 10;\r\n                    const salt = bcrypt.genSaltSync(saltRounds);\r\n                    const hashdPwd = bcrypt.hashSync(values.password, salt);\r\n                    const body = {\r\n                        email: values.email,\r\n                        password: hashdPwd,\r\n                    };\r\n                    const { USERS_URL , SIGN_UP } = pokeConstants;\r\n                    axios.post<SignUpResponse, any, any>(process.env.REACT_APP_BACKEND_URL + USERS_URL + SIGN_UP, body)\r\n                        .then(resp => {\r\n                            const toast = {\r\n                                show: true,\r\n                                header: \"Sign Up User\",\r\n                                msg: \"User signed up successfully\",\r\n                                variant: \"success\",\r\n                            };\r\n                            if (resp.status === 200) {\r\n                                if (resp.data.exists) {\r\n                                    toast.msg = \"User already exists, please log in\";\r\n                                    toast.variant = \"warning\"\r\n                                }\r\n                                // navigate(\"/login\");\r\n                            }\r\n                            showToast(toast);\r\n                        })\r\n                        .catch((err: any) => console.error(err));\r\n                }}\r\n        >\r\n    {({\r\n        errors,\r\n        touched,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit\r\n    }) => (\r\n        <Form className=\"sign-up\" onSubmit={handleSubmit} >\r\n            <h3 className=\"mb-3\">Sign Up</h3>\r\n            <Form.Group as={Col} className=\"mb-3\" controlId=\"formGridEmail\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email\"\r\n                    name=\"email\"\r\n                    className={touched.email && errors.email ? \"error\" : \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur} />\r\n                {\r\n                    touched.email && errors.email ?\r\n                        (<div className=\"error-message\">{errors.email}</div>)\r\n                        : null\r\n                }\r\n            </Form.Group>\r\n            <Form.Group as={Col} className=\"mb-3\" controlId=\"formGridPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    className={touched.password && errors.password ? \"error\" : \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur} />\r\n                {\r\n                    touched.password && errors.password ?\r\n                        (<div className=\"error-message\">{errors.password}</div>)\r\n                        : null\r\n                }\r\n            </Form.Group>\r\n            <Form.Group as={Col} className=\"mb-3\" controlId=\"formGridconfirm\">\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm Password\"\r\n                    name=\"confirm\"\r\n                    className={touched.confirm && errors.confirm ? \"error\" : \"\"}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur} />\r\n                {\r\n                    touched.confirm && errors.confirm ?\r\n                        (<div className=\"error-message\">{errors.confirm}</div>)\r\n                        : null\r\n                }\r\n            </Form.Group>\r\n            <Button variant=\"dark\" type=\"submit\" className=\"sign-up-button\">\r\n                Sign Up\r\n            </Button>\r\n        </Form>\r\n    )}\r\n        </TypedFormik >\r\n        <ToastNotification/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch : Dispatch) => ({\r\n    showToast: (show: ToastState) => dispatch(setToastComp(show)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp);","import { useState } from \"react\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport LogIn from '../../components/log-in/log-in.component';\r\nimport SignUp from '../../components/sign-up/sign-up.component';\r\nimport { selectCurrentUser } from \"../../redux/user/user.selector\";\r\nimport './sign-in-up.styles.scss';\r\n\r\nconst SignInUpPage = ({ currentUser }: any) => {\r\n    const [key, setKey] = useState('sign-up');\r\n\r\n    return (\r\n        <div className=\"sign-in-up\">\r\n            <Tabs\r\n                id=\"controlled-tab-example\"\r\n                activeKey={key}\r\n                onSelect={(k: any) => setKey(k)}\r\n                className=\"tab-group\"\r\n                defaultActiveKey={`${currentUser} ? 'login' : 'sign-up'`}\r\n            >\r\n                <Tab eventKey=\"sign-up\" title=\"SignUp\">\r\n                    <SignUp />\r\n                </Tab>\r\n                <Tab eventKey=\"login\" title=\"Log In\">\r\n                    <LogIn />\r\n                </Tab>\r\n            </Tabs>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    currentUser: selectCurrentUser,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SignInUpPage);","import { Routes, Route, Navigate } from 'react-router-dom';\r\n\r\nimport Header from './components/header/header.component';\r\nimport HomePage from './pages/homepage/homepage.component';\r\nimport FavPage from './pages/favorites/favorites.component';\r\nimport SignInUp from './pages/sign-in-up/sign-in-up.component';\r\n\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentUser } from './redux/user/user.selector';\r\nimport { AppProps } from './App.types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './App.css';\r\n\r\n\r\nconst App = ({ currentUser }: AppProps) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Routes>\r\n        <Route element={currentUser && currentUser.length > 0? <HomePage /> : <Navigate replace to=\"/sign-in-up\" />} path=\"/\" />\r\n        <Route element={!currentUser? <SignInUp /> : <Navigate replace to=\"/\" /> } path=\"/sign-in-up\" />\r\n        <Route element={currentUser && currentUser.length > 0? <FavPage /> : <Navigate replace to=\"/sign-in-up\" /> } path=\"/favorite-pokemons\" />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUser: selectCurrentUser\r\n})\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {  userActions, UserState } from \"./user.types\"\r\n\r\nconst INITIAL_STATE : UserState = {\r\n    currentUser : '',\r\n}\r\n\r\nconst userReducer = (state : UserState = INITIAL_STATE, action : any) : UserState => {\r\n    switch(action.type) {\r\n        case userActions.SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                currentUser: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","import { toastActionTypes, ToastState } from \"./toast.types\";\r\n\r\nconst INITIAL_STATE : ToastState = {\r\n    show: false,\r\n    header: \"\",\r\n    msg: \"\",\r\n    variant: \"\",\r\n};\r\n\r\nconst toastReducer = (state : ToastState = INITIAL_STATE, action: any) : ToastState => {\r\n\r\n\r\n    switch(action.type) {\r\n        case toastActionTypes.TOGGLE_SHOW_TOAST:\r\n            const {show, msg, header, variant} = action.payload;\r\n            return {\r\n                ...state,\r\n                show: show? show : false,\r\n                header: header ? header : \"\",\r\n                msg: msg? msg: \"\",\r\n                variant: variant? variant: \"\",\r\n            };\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default toastReducer;","import { PaginationState, paginationActions } from \"./pagination.types\";\r\n\r\nconst INITIAL_STATE : PaginationState = {\r\n    count: 0,\r\n    activePage: 1,\r\n};\r\n\r\nconst paginatonReducer = (state: PaginationState = INITIAL_STATE, action: any) : PaginationState => {\r\n    switch(action.type) {\r\n        case paginationActions.SET_ACTIVE_PAGE_NO:\r\n            return {\r\n                ...state,\r\n                activePage: action.payload,\r\n            };\r\n        case paginationActions.SET_TOTAL_PAGE_COUNT:\r\n            return {\r\n                ...state,\r\n                count: action.payload\r\n            }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default paginatonReducer;","import { pokemonActions } from \"./pokemon.types\";\r\n\r\nconst INITIAL_STATE = {\r\n    allPokemon: [],\r\n    isAllPokemonFetching: false,\r\n    allPokemonError: null,\r\n    isFavPokemonFetching: false,\r\n    favPokemon: [],\r\n    favPokemonError: null,\r\n    search: ''\r\n};\r\n\r\nconst pokemonReducer = (state = INITIAL_STATE, action: any) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n        case pokemonActions.FETCH_ALL_POKEMON_START:\r\n            return {\r\n                ...state,\r\n                isAllPokemonFetching: true,\r\n            };\r\n        case pokemonActions.FETCH_ALL_POKEMON_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAllPokemonFetching: false,\r\n                allPokemon: payload,\r\n            };\r\n        case pokemonActions.FETCH_ALL_POKEMON_FAILURE:\r\n            return {\r\n                ...state,\r\n                isAllPokemonFetching: false,\r\n                allPokemonError: payload,\r\n            }\r\n        case pokemonActions.FETCH_FAV_POKEMON_START:\r\n            return {\r\n                ...state,\r\n                isFavPokemonFetching: true,\r\n            };\r\n        case pokemonActions.FETCH_FAV_POKEMON_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFavPokemonFetching: false,\r\n                favPokemon: payload,\r\n            };\r\n        case pokemonActions.FETCH_FAV_POKEMON_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFavPokemonFetching: false,\r\n                favPokemonError: payload,\r\n            };\r\n        case pokemonActions.SET_SEARCH:\r\n            return {\r\n                ...state,\r\n                search: payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default pokemonReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport userReducer from './user/user.reducer';\r\nimport toastReducer from './toast/toast.reducer';\r\nimport paginatonReducer from './pagination/pagination.reducer';\r\nimport pokemonReducer from './pokemon/pokemon.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist:['cart', 'user']\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    user: userReducer,\r\n    toast: toastReducer,\r\n    page: paginatonReducer,\r\n    pokemon: pokemonReducer,\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport pokeConstants from \"../constants/poke.constants\";\r\n\r\nexport const axiosGetCall = async (route:string, query: string, page = 1, body: any = null, token = null) => {\r\n    let offset = 0;\r\n\r\n    if (route === pokeConstants.POKEMON_BASE_URL) {\r\n         if (page > 1) {\r\n            offset = (page - 1) * 100;\r\n        }\r\n        route = `${route}/${query}?offset=${offset}&limit=${100}`;\r\n    }\r\n\r\n    const onSuccess = (response : AxiosResponse) => {\r\n        return response.data;\r\n    }\r\n\r\n    const onError =  (error: AxiosError) => {\r\n        console.error('Request Failed:', error.config);\r\n\r\n        if (error.response) {\r\n            // Request was made but server responded with something\r\n            // other than 2xx\r\n            console.error('Status:', error.response.status);\r\n            console.error('Data:', error.response.data);\r\n            console.error('Headers:', error.response.headers);\r\n\r\n        } else {\r\n            // Something else happened while setting up the request\r\n            // triggered the error\r\n            console.error('Error Message:', error.message);\r\n        }\r\n\r\n        return Promise.reject(error.response || error.message);\r\n    }\r\n\r\n\r\n\r\n    return axios.get(route, {\r\n        data: body\r\n    }).then(onSuccess)\r\n        .catch(onError);\r\n}\r\n\r\nexport const axiosPostCall = async (route:string, query: string, body: any = null, token = null) => {\r\n\r\n    let page = 1;\r\n    let offset = 0;\r\n\r\n    if (route === pokeConstants.POKEMON_BASE_URL) {\r\n         if (page > 1) {\r\n            offset = (page - 1) * 100;\r\n        }\r\n        route = `${route}/${query}?offset=${offset}&limit=${100}`;\r\n    }\r\n\r\n    const onSuccess = (response : AxiosResponse) => {\r\n        return response.data;\r\n    }\r\n\r\n    const onError =  (error: AxiosError) => {\r\n        console.error('Request Failed:', error.config);\r\n\r\n        if (error.response) {\r\n            // Request was made but server responded with something\r\n            // other than 2xx\r\n            console.error('Status:', error.response.status);\r\n            console.error('Data:', error.response.data);\r\n            console.error('Headers:', error.response.headers);\r\n\r\n        } else {\r\n            // Something else happened while setting up the request\r\n            // triggered the error\r\n            console.error('Error Message:', error.message);\r\n        }\r\n\r\n        return Promise.reject(error.response || error.message);\r\n    }\r\n\r\n\r\n\r\n    return axios.post(route, {\r\n        data: body\r\n    }).then(onSuccess)\r\n        .catch(onError);\r\n}","import { takeLatest, all, call, put, select } from \"redux-saga/effects\";\r\nimport { axiosGetCall, axiosPostCall } from \"../../util/axios.util\";\r\nimport { fetchAllPokemonFailure, fetchAllPokemonSuccess, fetchFavPokemonSuccess } from \"./pokemon.action\";\r\nimport { pokemonActions } from \"./pokemon.types\";\r\nimport pokeConstants from \"../../constants/poke.constants\";\r\nimport { setTotalPageCount } from \"../pagination/pagination.action\";\r\nimport { selectCurrentUser } from \"../user/user.selector\";\r\nimport { selectActivePage } from \"../pagination/pagination.selector\";\r\nimport { selectPokemonSearch } from \"./pokemon.selector\";\r\n\r\nexport function* fetchAllPokemon(): Generator<any, any, any>{\r\n    try {\r\n        const page = yield select(selectActivePage);\r\n        const search = yield select(selectPokemonSearch)\r\n        const getAllPokemonResp = yield axiosGetCall(process.env.REACT_APP_BACKEND_URL + pokeConstants.POKEMON_BASE_URL, search, page);\r\n        const { count , results } = getAllPokemonResp;\r\n        yield put(setTotalPageCount(count));\r\n        yield put(fetchAllPokemonSuccess(results));\r\n    } catch (err: any) {\r\n        yield put(fetchAllPokemonFailure(err));\r\n    }\r\n}\r\n\r\nexport function* fetchFavPokemonStartSaga() {\r\n    yield takeLatest(pokemonActions.FETCH_FAV_POKEMON_START, fetchFavPokemon);\r\n}\r\n\r\nexport function* fetchFavPokemon(): Generator<any, any, any>{\r\n    try {\r\n        const { FAV_POKE_URL, GET_FAV_LIST } = pokeConstants;\r\n        const curerntUser = yield select(selectCurrentUser);\r\n        const favPokemon = yield axiosPostCall(process.env.REACT_APP_BACKEND_URL + FAV_POKE_URL + GET_FAV_LIST, \"\", {\r\n            user: curerntUser\r\n        });\r\n        // const { count , results } = getAllPokemonResp;\r\n        // yield put(setTotalPageCount(count));\r\n        yield put(fetchFavPokemonSuccess(favPokemon));\r\n    } catch (err: any) {\r\n        yield put(fetchAllPokemonFailure(err));\r\n    }\r\n}\r\n\r\nexport function* fetchAllPokemonStartSaga() {\r\n    yield takeLatest(pokemonActions.FETCH_ALL_POKEMON_START, fetchAllPokemon);\r\n}\r\n\r\nexport default function* pokemonSaga() {\r\n    yield all([\r\n        call(fetchAllPokemonStartSaga),\r\n        call(fetchFavPokemonStartSaga)\r\n    ]);\r\n}","import { all, call } from 'redux-saga/effects';\r\nimport pokemonSaga from './pokemon/pokemon.sagas';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(pokemonSaga)\r\n    ]);\r\n}","import { createStore, applyMiddleware, Store, Dispatch } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport rootReducer from './root.reducer';\r\nimport RootState from './store.type';\r\nimport rootSaga from './root.saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware : any = [sagaMiddleware];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middleware.push(logger);\r\n}\r\n\r\nexport const store: Store<RootState, any> & { dispatch: Dispatch } = createStore(\r\n    rootReducer,\r\n    applyMiddleware(...middleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport const persistedStore = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { persistedStore, store } from './redux/store';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <BrowserRouter>\r\n        <PersistGate persistor={persistedStore}>\r\n          <App />\r\n        </PersistGate>\r\n      </BrowserRouter>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}